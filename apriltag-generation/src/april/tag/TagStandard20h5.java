package april.tag;

/** Tag family with 236 distinct codes.
    bits: 20,  minimum hamming: 5

    Max bits corrected       False positive rate
            0                  0.02250671 %
            1                  0.47264099 %
            2                  4.74891663 %

    Generation time: 0.707000 s

    Hamming distance between pairs of codes (accounting for rotation):

       0  0
       1  0
       2  0
       3  0
       4  0
       5  1897
       6  4293
       7  5880
       8  6798
       9  5287
      10  2543
      11  836
      12  174
      13  20
      14  2
      15  0
      16  0
      17  0
      18  0
      19  0
      20  0
**/
public class TagStandard20h5 extends TagFamily
{
	private static class ConstructCodes0 {
		private static long[] constructCodes() {
			return new long[] { 0x561b6L, 0x4677bL, 0x36d40L, 0x27305L, 0x178caL, 0xf8454L, 0xe8a19L, 0xd8fdeL, 0xc95a3L, 0xb9b68L, 0xaa12dL, 0x8acb7L, 0x7b27cL, 0x6b841L, 0x4c3cbL, 0x2cf55L, 0x1d51aL, 0xcf1f3L, 0xbf7b8L, 0xafd7dL, 0x71491L, 0x61a56L, 0x1372fL, 0xf42b9L, 0xb59cdL, 0xa5f92L, 0x770e1L, 0x676a6L, 0x57c6bL, 0x28dbaL, 0x1937fL, 0x09944L, 0xf9f09L, 0xdaa93L, 0xbb61dL, 0xabbe2L, 0x9c1a7L, 0x5d8bbL, 0x2ea0aL, 0x0f594L, 0xffb59L, 0xa1df7L, 0x923bcL, 0x53ad0L, 0x44095L, 0x3465aL, 0xa7a47L, 0x885d1L, 0x49ce5L, 0x3a2aaL, 0x0b3f9L, 0xdc548L, 0xb32e7L, 0xe7de8L, 0xd83adL, 0xc8972L, 0x99ac1L, 0x7a64bL, 0x5b1d5L, 0x1c8e9L, 0x419afL, 0xb4d9cL, 0x764b0L, 0x1874eL, 0xf92d8L, 0x9b576L, 0x5cc8aL, 0xa11c6L, 0x23feeL, 0xd5cc7L, 0xa6e16L, 0x490b4L, 0x3f2c9L, 0xd1b2cL, 0x44f19L, 0x507b9L, 0x40d7eL, 0xf2a57L, 0x469ceL, 0x9c3faL, 0xf5fc1L, 0xec1d6L, 0x9deafL, 0x4fb88L, 0xb353aL, 0x70ab3L, 0x321c7L, 0xe3ea0L, 0x5728dL, 0x47852L, 0x1e5f1L, 0xc64dfL, 0xaccb9L, 0x162bbL, 0x6a232L, 0x31596L, 0x8550dL, 0xcf699L, 0x524c1L, 0x77587L, 0x19825L, 0x5dd61L, 0x984b2L, 0x18bf4L, 0xff3ceL, 0xc0ae2L, 0x4b00fL, 0x568afL, 0xe9112L, 0xe4f77L, 0xd6ff1L, 0x76ba9L, 0x382bdL, 0xf99d1L, 0x53598L, 0xad15fL, 0xd2225L, 0xce08aL, 0xc5d54L, 0x6dc42L, 0x98958L, 0xfddbfL, 0x9d977L, 0xa9217L, 0x52bbaL, 0xdeb9cL, 0xbb58bL, 0x3fe68L, 0x68498L, 0x3b09cL, 0x889e5L, 0x237d1L, 0xd4879L, 0xb5403L, 0x15f44L, 0xb81e2L, 0x36e6fL, 0x22668L, 0x7c22fL, 0xa7198L, 0x9ee62L, 0x0d483L, 0x02a67L, 0x86bb9L, 0x66b12L, 0xe30b9L, 0xa5651L, 0x95e69L, 0xc9d39L, 0x0a0daL, 0x31ad9L, 0xb221bL, 0x6745eL, 0x096fcL, 0x3fcb2L, 0x3797cL, 0x19fbbL, 0x2702bL, 0xab908L, 0x1a17cL, 0x7165dL, 0xf94a4L, 0xf053dL, 0x92a2eL, 0xde66fL, 0x10a8aL, 0x4a486L, 0x0f357L, 0x8d859L, 0xb3c49L, 0x3438bL, 0x3effaL, 0xd501aL, 0xd3a0bL, 0x6bebeL, 0x7e6d8L, 0x9d616L, 0x8fd89L, 0x89e54L, 0x268b6L, 0x356c0L, 0x4d684L, 0xb396fL, 0x98d8dL, 0x3c5a8L, 0x374f7L, 0x06de4L, 0x5c52bL, 0xb2650L, 0x793eaL, 0x081abL, 0xea05fL, 0xe504bL, 0x2d5feL, 0x1c6e3L, 0x8fad0L, 0xf6675L, 0xadf0cL, 0x0a5cdL, 0x894adL, 0xe69f2L, 0x3a969L, 0x1fb34L, 0x9c45dL, 0xbcbfdL, 0xdaf0aL, 0xd929fL, 0x5c0c7L, 0xa4c44L, 0xd18b5L, 0x6f19bL, 0x267dfL, 0x138edL, 0xa4163L, 0x45a23L, 0x4a064L, 0x72d8dL, 0x12cd2L, 0x8826dL, 0x1fd6eL, 0xe94d3L, 0x0dfcfL, 0x08d68L, 0xd13f6L, 0x0a7a1L, 0x955b4L, 0x83fabL, 0x65d3bL, 0x27b48L, 0xfe15cL, 0xbefd7L, 0x4955cL, 0x9f439L, 0xf53a5L, 0x2aa50L, 0xddaeaL };
		}
	}

	private static long[] constructCodes() {
		long[] codes = new long[236];
		System.arraycopy(ConstructCodes0.constructCodes(), 0, codes, 0, 236);
		return codes;
	}

	public TagStandard20h5()
	{
		super(ImageLayout.Factory.createFromString("Standard", "dddddddbbbbddbwwbddbwwbddbbbbddddddd"), 5, constructCodes());
	}
}
